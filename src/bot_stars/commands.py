### –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
from telegram import KeyboardButton, Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import os
from telegram.ext import (
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler
)
from datetime import datetime
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from datetime import datetime
from bot_stars.utils import getSheetRepository

NAME, LASTNAME, BIRTHDATE, PHONE = range(4)
SELECT_USER, ENTER_STARS, ENTER_STARS1 = range(3)
ENTER_COMMENT, ENTER_COMMENT1 = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.message.from_user.id
    sheet_repo = getSheetRepository(context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    access_status = sheet_repo.getUserAccess(user_id)
    if access_status and "–ó–∞–ø—Ä–µ—Ç" in access_status:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏ @pulatovman")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if sheet_repo.sheet1.find(str(user_id)):
        admin_ids_str = os.getenv("ADMIN_ID")
        print(f"admin_ids_str = {admin_ids_str}")
        admin_ids_str = admin_ids_str.replace('"', '').replace("'", "")
        admin_ids = [int(id.strip()) for id in admin_ids_str.split(",")]
        user_id = update.message.from_user.id

        if user_id in admin_ids:
            await update.message.reply_text(f"–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—Å: \n**1.** /list \n**2.** /addstars \n**3.** /remstars \n**4.** /block \n**5.** /unblock ", parse_mode="Markdown")
            return
        
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /viewstars")
        return ConversationHandler.END
    
    context.user_data["user_id"] = user_id

    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )

    # name?
    sent_message = await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=reply_markup,
    )

    context.user_data["last_bot_message_id"] = sent_message.message_id
    context.user_data["in_dialog"] = True
    return NAME

async def viewstars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    sheet_repo = getSheetRepository(context)
    access_status = sheet_repo.getUserAccess(user_id)
    if access_status and "–ó–∞–ø—Ä–µ—Ç" in access_status:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏ @pulatovman")
        return ConversationHandler.END

    cell = sheet_repo.sheet1.find(str(user_id))
    if not cell:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    data = sheet_repo.sheet1.get_all_values()
    stars = "0"
    for row in data[1:]:
        if len(row) > 6 and row[0] == str(user_id):
            stars = row[6] if row[6] else "0"
            break
    loc_id = sheet_repo.sheet1.cell(cell.row, 8).value
    comments = sheet_repo.get_last_comments(int(loc_id), limit=10)

    message = f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {stars}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    for comment in comments:
        if str(comment).startswith("+"):
            message += f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {comment[1:]}\n"
        elif str(comment).startswith("-"):
            message += f"–°–ø–∏—Å–∞–Ω–∏–µ {comment[1:]}\n"

    await update.message.reply_text(message)


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = update.message.text
    if user_name == "–û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel(update, context)
    if "last_bot_message_id" in context.user_data:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=context.user_data["last_bot_message_id"],
        )
    context.user_data["user_name"] = user_name

    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    # lastname?
    sent_message = await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é?",
        reply_markup=reply_markup,
    )
    context.user_data["last_bot_message_id"] = sent_message.message_id
    return LASTNAME


async def get_lastname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_lastname = update.message.text
    if user_lastname == "–û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel(update, context)
    if "last_bot_message_id" in context.user_data:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=context.user_data["last_bot_message_id"],
        )

    context.user_data["user_lastname"] = user_lastname

    keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )

    # birthdate?
    sent_message = await context.bot.send_message(
        chat_id=update.message.chat.id,
        text=f"–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)",
        reply_markup=reply_markup,
    )

    context.user_data["last_bot_message_id"] = sent_message.message_id

    return BIRTHDATE


async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    birthdate_str = update.message.text
    if birthdate_str == "–û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel(update, context)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if "last_bot_message_id" in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=context.user_data["last_bot_message_id"],
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    try:
        birthdate = datetime.strptime(birthdate_str, "%d.%m.%Y")
        today = datetime.today()
        age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))

        if age > 50:
            sent_message = await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì).")
            context.user_data["last_bot_message_id"] = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
            return BIRTHDATE

        context.user_data["birthdate"] = birthdate_str

        keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        sent_message = await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=reply_markup)
        context.user_data["last_bot_message_id"] = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id

        return PHONE

    except ValueError:
        sent_message = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        context.user_data["last_bot_message_id"] = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        return BIRTHDATE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = (
        update.message.contact.phone_number
        if update.message.contact
        else update.message.text
    )

    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = context.user_data["user_id"]
    user_name = context.user_data["user_name"]
    user_lastname = context.user_data["user_lastname"]
    birthdate_str = context.user_data["birthdate"]
    phone = context.user_data["phone"]

    getSheetRepository(context).saveNewUser(
        user_id, user_name, user_lastname, birthdate_str, phone
    )
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data.clear()
    context.user_data["in_dialog"] = False

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data.clear()
    context.user_data["in_dialog"] = False
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥
async def add_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = [int(id) for id in os.getenv("ADMIN_ID").split(",")]
    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        return

    sheet_repo = getSheetRepository(context)

    try:
        data = sheet_repo.sheet1.get_all_values()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    keyboard = []
    for row in data[1:]:
        user_id_col = row[0]
        name = row[1]
        lastname = row[2]
        if name and lastname and user_id_col:
            button = InlineKeyboardButton(
                text=f"{name} {lastname}",
                callback_data=f"select_user_{user_id_col}"
            )
            keyboard.append([button])

    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_stars_input")
    keyboard.append([cancel_button])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:",
        reply_markup=reply_markup
    )
    return SELECT_USER

async def rem_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = [int(id) for id in os.getenv("ADMIN_ID").split(",")]
    user_id = update.message.from_user.id
    if user_id not in admin_ids:
        return
    
    sheet_repo = getSheetRepository(context)
    try:
        data = sheet_repo.sheet1.get_all_values()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return
    
    keyboard = []
    for row in data[1:]:  
        user_id_col = row[0]
        name = row[1]
        lastname = row[2]
        if name and lastname and user_id_col:
            button = InlineKeyboardButton(
                text=f"{name} {lastname}",
                callback_data=f"select_user_{user_id_col}"
            )
            keyboard.append([button])

    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_stars_input")
    keyboard.append([cancel_button])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:",
        reply_markup=reply_markup
    )
    return SELECT_USER

async def enter_stars1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stars = update.message.text

    try:
        stars = int(stars)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_STARS1

    context.user_data["stars"] = stars
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return ENTER_COMMENT1

async def enter_comment1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    stars = context.user_data["stars"]
    selected_user_id = context.user_data.get("selected_user_id")

    sheet_repo = getSheetRepository(context)

    try:
        data = sheet_repo.sheet1.get_all_values()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    for i, row in enumerate(data):
        if row[0] == selected_user_id:
            current_stars = row[6] if len(row) > 6 else "0"
            current_stars = int(current_stars) if current_stars else 0

            if current_stars - stars < 0:
                await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ —É –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ {row[1]} {row[2]}")
                return ConversationHandler.END

            new_stars = current_stars - stars
            sheet_repo.sheet1.update_cell(i + 1, 7, str(new_stars))
            loc_id = sheet_repo.sheet1.cell(i + 1, 8).value

            # comment
            comment_text = f"-{stars} –∑–≤—ë–∑–¥: {comment}"
            sheet_repo.add_comment_to_sheet2(int(loc_id), comment_text)

            await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {stars} –∑–≤—ë–∑–¥ —É –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ {row[1]} {row[2]}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_stars} –∑–≤—ë–∑–¥.")
            return ConversationHandler.END

    await update.message.reply_text("–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END


async def select_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_user = update.message.text

    if selected_user == "–û—Ç–º–µ–Ω–∞":
        await stop(update, context) 
        return ConversationHandler.END

    context.user_data["selected_user"] = selected_user

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:", reply_markup=ReplyKeyboardRemove())

    return ENTER_STARS

async def select_user1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_user = update.message.text

    if selected_user == "–û—Ç–º–µ–Ω–∞":
        await stop(update, context) 
        return ConversationHandler.END

    context.user_data["selected_user"] = selected_user

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:", reply_markup=ReplyKeyboardRemove())

    return ENTER_STARS1

async def enter_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stars = update.message.text

    try:
        stars = int(stars)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_STARS

    context.user_data["stars"] = stars

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return ENTER_COMMENT

async def enter_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    stars = context.user_data["stars"]
    selected_user_id = context.user_data.get("selected_user_id")

    sheet_repo = getSheetRepository(context)

    try:
        data = sheet_repo.sheet1.get_all_values()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    for i, row in enumerate(data):
        if row[0] == selected_user_id:
            current_stars = row[6] if len(row) > 6 else "0"
            current_stars = int(current_stars) if current_stars else 0

            new_stars = current_stars + stars
            sheet_repo.sheet1.update_cell(i + 1, 7, str(new_stars))

            loc_id = sheet_repo.sheet1.cell(i + 1, 8).value
            #comment
            comment_text = f"+{stars} –∑–≤—ë–∑–¥: {comment}"
            sheet_repo.add_comment_to_sheet2(int(loc_id), comment_text)

            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {stars} –∑–≤—ë–∑–¥ –ø–æ–¥—Ä–æ—Å—Ç–∫—É {row[1]} {row[2]}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_stars} –∑–≤—ë–∑–¥.")
            return ConversationHandler.END

    await update.message.reply_text("–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

async def handle_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    user_id = callback_data.split("_")[-1]
    context.user_data["selected_user_id"] = user_id
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_stars_input")
    reply_markup = InlineKeyboardMarkup([[cancel_button]])
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:",
        reply_markup=reply_markup
    )
    return ENTER_STARS

async def handle_user_selection1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    user_id = callback_data.split("_")[-1]
    context.user_data["selected_user_id"] = user_id
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_stars_input")
    reply_markup = InlineKeyboardMarkup([[cancel_button]])
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:",
        reply_markup=reply_markup
    )
    return ENTER_STARS1

async def cancel_stars_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() 
    await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–≤—ë–∑–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = [int(id) for id in os.getenv("ADMIN_ID").split(",")]
    user_id = update.message.from_user.id

    if user_id not in admin_ids:
        return

    sheet_repo = getSheetRepository(context)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    try:
        data = sheet_repo.sheet1.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏ 
    keyboard = []
    for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        user_id_col = row[0]  # –ö–æ–ª–æ–Ω–∫–∞ A Id
        name = row[1]  # –ö–æ–ª–æ–Ω–∫–∞ B Name
        lastname = row[2]  # –ö–æ–ª–æ–Ω–∫–∞ C Lastname
        if name and lastname and user_id_col:
            button = InlineKeyboardButton(
                text=f"{name} {lastname}",
                callback_data=f"user_stars_{user_id_col}"  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback_data
            )
            keyboard.append([button])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:",
        reply_markup=reply_markup
    )

async def show_user_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id = callback_data.split("_")[-1]

    sheet_repo = getSheetRepository(context)

    try:
        data = sheet_repo.sheet1.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    for row in data:
        if row[0] == user_id:  # –ò—â–µ–º –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–æ–Ω–∫–∞ A
            name = row[1]  # –ö–æ–ª–æ–Ω–∫–∞ B Name
            lastname = row[2]  # –ö–æ–ª–æ–Ω–∫–∞ C Lastname
            stars = row[6] if len(row) > 6 and row[6] else "0"  # –ö–æ–ª–æ–Ω–∫–∞ L (Stars), –µ—Å–ª–∏ –ø—É—Å—Ç–æ, —Ç–æ 0

            await query.edit_message_text(
                f"–£ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ {name} {lastname} {stars} –∑–≤—ë–∑–¥."

                # –¢—É—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ü–∏–∫–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

            )
            return

    await query.edit_message_text("–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# Block and Unblock

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = [int(id) for id in os.getenv("ADMIN_ID").split(",")]
    user_id = update.message.from_user.id

    if user_id not in admin_ids:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    sheet_repo = getSheetRepository(context)
    try:
        data = sheet_repo.sheet1.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏
    keyboard = []
    for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        user_id_col = row[0]
        name = row[1]
        lastname = row[2]
        if name and lastname and user_id_col:
            button = InlineKeyboardButton(
                text=f"{name} {lastname}",
                callback_data=f"block_user_{user_id_col}"  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback_data
            )
            keyboard.append([button])
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_block")
    keyboard.append([cancel_button])

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_user_selection_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    target_user_id = query.data.replace("block_user_", "")

    context.user_data["target_user_id"] = target_user_id

    sheet_repo = getSheetRepository(context)
    data = sheet_repo.sheet1.get_all_values()
    for row in data[1:]:
        if row[0] == target_user_id:
            name = row[1]
            lastname = row[2]
            break
    keyboard = [
        [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data=f"confirm_block_{target_user_id}")],
        [InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="cancel_block")]
    ]

    await query.edit_message_text(
        f"–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ä–æ—Å—Ç–∫—É {name} {lastname}?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞"
    if query.data.startswith("confirm_block_"):
        target_user_id = query.data.replace("confirm_block_", "")

        sheet_repo = getSheetRepository(context)
        data = sheet_repo.sheet1.get_all_values()
        name, lastname = None, None

        for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            if row[0] == target_user_id:
                name = row[1]
                lastname = row[2]
                break

        if name and lastname:
            getSheetRepository(context).blockUser(target_user_id)
            await query.edit_message_text(f"–ü–æ–¥—Ä–æ—Å—Ç–æ–∫—É {name} {lastname} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø.")
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.")

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç"
    elif query.data == "cancel_block":
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = [int(id) for id in os.getenv("ADMIN_ID").split(",")]
    user_id = update.message.from_user.id

    if user_id not in admin_ids:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    sheet_repo = getSheetRepository(context)
    try:
        data = sheet_repo.sheet1.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏
    keyboard = []
    for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        user_id_col = row[0]
        name = row[1]
        lastname = row[2]
        if name and lastname and user_id_col:
            button = InlineKeyboardButton(
                text=f"{name} {lastname}",
                callback_data=f"unblock_user_{user_id_col}"  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback_data
            )
            keyboard.append([button])
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_block")
    keyboard.append([cancel_button])

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_user_selection_unblock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    target_user_id = query.data.replace("unblock_user_", "")

    context.user_data["target_user_id"] = target_user_id

    sheet_repo = getSheetRepository(context)
    data = sheet_repo.sheet1.get_all_values()
    for row in data[1:]:
        if row[0] == target_user_id:
            name = row[1]
            lastname = row[2]
            break
    keyboard = [
        [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data=f"confirm_unblock_{target_user_id}")],
        [InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="cancel_unblock")]
    ]

    await query.edit_message_text(
        f"–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ä–æ—Å—Ç–∫—É {name} {lastname}?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_confirmation1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞"
    if query.data.startswith("confirm_unblock_"):
        target_user_id = query.data.replace("confirm_unblock_", "")

        sheet_repo = getSheetRepository(context)
        data = sheet_repo.sheet1.get_all_values()
        name, lastname = None, None

        for row in data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            if row[0] == target_user_id:
                name = row[1]
                lastname = row[2]
                break

        if name and lastname:
            getSheetRepository(context).unblockUser(target_user_id)
            await query.edit_message_text(f"–ü–æ–¥—Ä–æ—Å—Ç–æ–∫—É {name} {lastname} —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø.")
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É.")

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç"
    elif query.data == "cancel_unblock":
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
